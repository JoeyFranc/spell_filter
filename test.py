""" enums.py is an autogenerated file.  Check documentation """
""" FILTER ENUMS """

ENUM_KEYS = [
    ('source', 5),
    ('classes', 13),
    ('school', 8)
]

# source
PHB=0
EE=1
SCAG=2
TROT=3
UA=4

# classes
BARBARIAN=0
BARD=1
CLERIC=2
DRUID=3
FIGHTER=4
MONK=5
PALADIN=6
RANGER=7
ROGUE=8
SORCERER=9
WARLOCK=10
WIZARD=11
RITUAL_CASTER=12

# school
ABJURATION=0
CONJURATION=1
DIVINATION=2
ENCHANTMENT=3
EVOCATION=4
ILLUSION=5
NECROMANCY=6
TRANSMUTATION=7

""" This file gets copied verbatim into the enum pyfile. DO NOT TOUCH """

# race
HUMAN = 0
DWARF = 1
ELF = 2
HAFLING = 3
DRAGONBORN = 4
GNOME = 5
HALF_ELF = 6
HALF_ORC = 7
TIEFLING = 8 

# stat
STR = 0
DEX = 1
CON = 2
INT = 3
WIS = 4
CHA = 5

#ENUMSTOP#

# Constants
NUM_SPELLS = 415

class Invalid_Enum(Exception):

    def __init__(self, family, value):
        self.family = family
        self.value = value
    def __str__(self): return 'Attempted to find a class for ' + self.role

def v_source2str(source):
# Verbosely return a string describing a source

    if   source == PHB:     return 'Players Handbook'
    elif source == EE:      return 'Elemental Evil Player\'s Companion'
    elif source == SCAG:    return 'Sword Coast Adventurer\'s Guide'
    elif source == TROT:    return 'The Rise of Tiamat'
    elif source == UA:      return 'Unearthed Arcana'

    raise Invalid_Enum('Source Material', source)

def str2class( string ):

    if   string == 'BARBARIAN' or string == 'barbarian' or string == 'Barbarian':   return BARBARIAN
    elif string == 'bard' or string == 'Bard' or string == 'BARD':                  return BARD
    elif string == 'cleric' or string == 'Cleric' or string == 'CLERIC':            return CLERIC
    elif string == 'druid' or string == 'Druid' or string == 'DRUID':               return DRUID
    elif string == 'figher' or string == 'Figher' or string == 'FIGHTER':           return FIGHTER
    elif string == 'monk' or string == 'Monk' or string == 'MONK':                  return MONK
    elif string == 'paladin' or string == 'Paladin' or string == 'PALADIN':         return PALADIN
    elif string == 'ranger' or string == 'Ranger' or string == 'RANGER':            return RANGER
    elif string == 'rogue' or string == 'Rogue' or string == 'ROGUE':               return RANGER
    elif string == 'sorcerer' or string == 'Sorcerer' or string == 'SORCERER':      return SORCERER
    elif string == 'warlock' or string == 'Warlock' or string == 'WARLOCK':         return WARLOCK
    elif string == 'wizard' or string == 'Wizard' or string == 'WIZARD':            return WIZARD
    elif string == 'ritual caster' or string == 'Ritual Caster' \
    or   string == 'RITUAL CASTER' or string == 'Ritual caster':                    return RITUAL_CASTER

    raise Invalid_Enum('Class',string)

""" Autogenerated Functions """

def source2str(source_enum):

    if   source_enum==PHB: return 'Phb'
    elif source_enum==EE: return 'Ee'
    elif source_enum==SCAG: return 'Scag'
    elif source_enum==TROT: return 'Trot'
    elif source_enum==UA: return 'Ua'

    raise Invalid_Enum('source',source_enum)

def str2source(string):

    if   string=='Phb': return PHB
    elif string=='Ee': return EE
    elif string=='Scag': return SCAG
    elif string=='Trot': return TROT
    elif string=='Ua': return UA

    raise Invalid_Enum('source',string)

def classes2str(classes_enum):

    if   classes_enum==BARBARIAN: return 'Barbarian'
    elif classes_enum==BARD: return 'Bard'
    elif classes_enum==CLERIC: return 'Cleric'
    elif classes_enum==DRUID: return 'Druid'
    elif classes_enum==FIGHTER: return 'Fighter'
    elif classes_enum==MONK: return 'Monk'
    elif classes_enum==PALADIN: return 'Paladin'
    elif classes_enum==RANGER: return 'Ranger'
    elif classes_enum==ROGUE: return 'Rogue'
    elif classes_enum==SORCERER: return 'Sorcerer'
    elif classes_enum==WARLOCK: return 'Warlock'
    elif classes_enum==WIZARD: return 'Wizard'
    elif classes_enum==RITUAL_CASTER: return 'Ritual_caster'

    raise Invalid_Enum('classes',classes_enum)

def school2str(school_enum):

    if   school_enum==ABJURATION: return 'Abjuration'
    elif school_enum==CONJURATION: return 'Conjuration'
    elif school_enum==DIVINATION: return 'Divination'
    elif school_enum==ENCHANTMENT: return 'Enchantment'
    elif school_enum==EVOCATION: return 'Evocation'
    elif school_enum==ILLUSION: return 'Illusion'
    elif school_enum==NECROMANCY: return 'Necromancy'
    elif school_enum==TRANSMUTATION: return 'Transmutation'

    raise Invalid_Enum('school',school_enum)

def str2school(string):

    if   string=='Abjuration': return ABJURATION
    elif string=='Conjuration': return CONJURATION
    elif string=='Divination': return DIVINATION
    elif string=='Enchantment': return ENCHANTMENT
    elif string=='Evocation': return EVOCATION
    elif string=='Illusion': return ILLUSION
    elif string=='Necromancy': return NECROMANCY
    elif string=='Transmutation': return TRANSMUTATION

    raise Invalid_Enum('school',string)

def race2str(race_enum):

    if   race_enum==HUMAN : return 'Human '
    elif race_enum==DWARF : return 'Dwarf '
    elif race_enum==ELF : return 'Elf '
    elif race_enum==HAFLING : return 'Hafling '
    elif race_enum==DRAGONBORN : return 'Dragonborn '
    elif race_enum==GNOME : return 'Gnome '
    elif race_enum==HALF_ELF : return 'Half_elf '
    elif race_enum==HALF_ORC : return 'Half_orc '
    elif race_enum==TIEFLING : return 'Tiefling '

    raise Invalid_Enum('race',race_enum)

def str2race(string):

    if   string=='Human ': return HUMAN 
    elif string=='Dwarf ': return DWARF 
    elif string=='Elf ': return ELF 
    elif string=='Hafling ': return HAFLING 
    elif string=='Dragonborn ': return DRAGONBORN 
    elif string=='Gnome ': return GNOME 
    elif string=='Half_elf ': return HALF_ELF 
    elif string=='Half_orc ': return HALF_ORC 
    elif string=='Tiefling ': return TIEFLING 

    raise Invalid_Enum('race',string)

def stat2str(stat_enum):

    if   stat_enum==STR : return 'Str '
    elif stat_enum==DEX : return 'Dex '
    elif stat_enum==CON : return 'Con '
    elif stat_enum==INT : return 'Int '
    elif stat_enum==WIS : return 'Wis '
    elif stat_enum==CHA : return 'Cha '

    raise Invalid_Enum('stat',stat_enum)

def str2stat(string):

    if   string=='Str ': return STR 
    elif string=='Dex ': return DEX 
    elif string=='Con ': return CON 
    elif string=='Int ': return INT 
    elif string=='Wis ': return WIS 
    elif string=='Cha ': return CHA 

    raise Invalid_Enum('stat',string)
